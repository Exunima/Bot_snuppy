import os
import discord
from collections import deque
from config import FFMPEG_PATH
from .downloader import download_and_queue_track
from .utils import delete_file, get_track_ids
import re
from discord import VoiceClient
from typing import Optional

vc: Optional[VoiceClient] = None
queue = deque()
is_playing = False


def setup(bot):
    @bot.command(name='play')
    async def play(ctx, *, url: str = None):
        global vc
        if url is None:
            await ctx.send("–ü—Ä–∏–º–µ—Ä: !play <—Å—Å—ã–ª–∫–∞>")
            return

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        voice_channel = ctx.author.voice.channel
        if vc is None or not vc.is_connected():
            vc = await voice_channel.connect()
        elif vc.channel != voice_channel:
            await vc.move_to(voice_channel)

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞/–∞–ª—å–±–æ–º–∞
            track_ids = get_track_ids(url)
            for tid in track_ids:
                await download_and_queue_track(tid, queue)
            await ctx.send(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(track_ids)} —Ç—Ä–µ–∫–æ–≤.")

        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç/–∞–ª—å–±–æ–º, –ø—Ä–æ–≤–µ—Ä–∏–º, —Ç—Ä–µ–∫ –ª–∏ —ç—Ç–æ
            match = re.search(r'track/(\d+)', url)
            if match:
                tid = match.group(1)
                path = await download_and_queue_track(tid, queue)
                await ctx.send(f"–î–æ–±–∞–≤–ª–µ–Ω: {os.path.basename(path)}")
            else:
                await ctx.send("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫, –∞–ª—å–±–æ–º –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç.")
        except Exception as e:
            await ctx.send(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {e}")

        if not vc.is_playing() and queue:
            await play_next_track(ctx)

    async def play_next_track(ctx):
        global vc, is_playing

        if is_playing:
            return  # –£–∂–µ –∏–≥—Ä–∞–µ—Ç ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–µ –Ω—É–∂–µ–Ω

        if not queue:
            is_playing = False
            return

        if vc is None or not vc.is_connected():
            await ctx.send("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")
            is_playing = False
            return

        current = queue.popleft()

        if not os.path.exists(current):
            await ctx.send(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {os.path.basename(current)}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            await play_next_track(ctx)
            return

        try:
            is_playing = True
            vc.play(
                discord.FFmpegPCMAudio(current, executable=FFMPEG_PATH),
                after=lambda err: ctx.bot.loop.create_task(track_finished(ctx, current))
            )
            await ctx.send(f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {os.path.basename(current)}")
        except Exception as e:
            await ctx.send(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            await delete_file(current)
            is_playing = False
            await play_next_track(ctx)

    async def track_finished(ctx, path):
        global is_playing
        await delete_file(path)
        is_playing = False
        await play_next_track(ctx)

    @bot.command(name='pause')
    async def pause(ctx):
        global vc
        if vc is not None and vc.is_connected():
            if vc.is_playing():
                vc.pause()
                await ctx.send("‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑–µ.")
            else:
                await ctx.send("üéµ –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.")
        else:
            await ctx.send("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

    @bot.command(name='resume')
    async def resume(ctx):
        global vc
        if vc is not None and vc.is_connected():
            if vc.is_paused():
                vc.resume()
                await ctx.send("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.")
            else:
                await ctx.send("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –ø–∞—É–∑–µ.")
        else:
            await ctx.send("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

    @bot.command(name='stop')
    async def stop(ctx):
        global vc, queue, is_playing

        if vc is not None and vc.is_connected():
            if vc.is_playing():
                vc.stop()
            await vc.disconnect()
            vc = None

        # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        queue.clear()
        is_playing = False

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö mp3-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ tracks
        deleted = 0
        if os.path.exists("tracks"):
            for filename in os.listdir("tracks"):
                if filename.endswith(".mp3"):
                    filepath = os.path.join("tracks", filename)
                    try:
                        os.remove(filepath)
                        deleted += 1
                    except Exception as e:
                        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {filepath}: {e}")

        await ctx.send(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ {deleted} —Ç—Ä–µ–∫–æ–≤.")

    @bot.command(name='skip')
    async def skip(ctx):
        global vc
        if vc is not None and vc.is_connected():
            if vc.is_playing() or vc.is_paused():
                vc.stop()
                await ctx.send("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ. –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫...")
            else:
                await ctx.send("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.")
        else:
            await ctx.send("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

    @bot.command(name='queue')
    async def show_queue(ctx):
        if queue:
            q_list = list(queue)
            display_count = min(len(q_list), 10)
            display = "\n".join([f"{i + 1}. {os.path.basename(p)}" for i, p in enumerate(q_list[:display_count])])
            more = f"\n...–∏ –µ—â—ë {len(q_list) - display_count} —Ç—Ä–µ–∫–æ–≤." if len(q_list) > display_count else ""
            await ctx.send(f"üìÉ –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤:\n{display}{more}")
        else:
            await ctx.send("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
